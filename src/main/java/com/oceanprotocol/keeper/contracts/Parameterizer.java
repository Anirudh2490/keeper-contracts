package com.oceanprotocol.keeper.contracts;

import io.reactivex.Flowable;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.FunctionEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Bytes32;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple5;
import org.web3j.tuples.generated.Tuple7;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 4.0.1.
 */
public class Parameterizer extends Contract {
    private static final String BINARY = "";

    public static final String FUNC_PROCESSBY = "PROCESSBY";

    public static final String FUNC_PROPOSALS = "proposals";

    public static final String FUNC_CHALLENGES = "challenges";

    public static final String FUNC_PARAMS = "params";

    public static final String FUNC_TOKEN = "token";

    public static final String FUNC_VOTING = "voting";

    public static final String FUNC_PROPOSEREPARAMETERIZATION = "proposeReparameterization";

    public static final String FUNC_CHALLENGEREPARAMETERIZATION = "challengeReparameterization";

    public static final String FUNC_PROCESSPROPOSAL = "processProposal";

    public static final String FUNC_CLAIMREWARD = "claimReward";

    public static final String FUNC_VOTERREWARD = "voterReward";

    public static final String FUNC_CANBESET = "canBeSet";

    public static final String FUNC_PROPEXISTS = "propExists";

    public static final String FUNC_CHALLENGECANBERESOLVED = "challengeCanBeResolved";

    public static final String FUNC_CHALLENGEWINNERREWARD = "challengeWinnerReward";

    public static final String FUNC_GET = "get";

    public static final String FUNC_TOKENCLAIMS = "tokenClaims";

    public static final Event _REPARAMETERIZATIONPROPOSAL_EVENT = new Event("_ReparameterizationProposal", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Address>(true) {}));
    ;

    public static final Event _NEWCHALLENGE_EVENT = new Event("_NewChallenge", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>(true) {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Address>(true) {}));
    ;

    public static final Event _PROPOSALACCEPTED_EVENT = new Event("_ProposalAccepted", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>(true) {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event _PROPOSALEXPIRED_EVENT = new Event("_ProposalExpired", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>(true) {}));
    ;

    public static final Event _CHALLENGESUCCEEDED_EVENT = new Event("_ChallengeSucceeded", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>(true) {}, new TypeReference<Uint256>(true) {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event _CHALLENGEFAILED_EVENT = new Event("_ChallengeFailed", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>(true) {}, new TypeReference<Uint256>(true) {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event _REWARDCLAIMED_EVENT = new Event("_RewardClaimed", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>(true) {}, new TypeReference<Uint256>() {}, new TypeReference<Address>(true) {}));
    ;

    protected static final HashMap<String, String> _addresses;

    static {
        _addresses = new HashMap<String, String>();
    }

    @Deprecated
    protected Parameterizer(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected Parameterizer(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected Parameterizer(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected Parameterizer(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public RemoteCall<BigInteger> PROCESSBY() {
        final Function function = new Function(FUNC_PROCESSBY, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<Tuple7<BigInteger, BigInteger, BigInteger, String, String, BigInteger, BigInteger>> proposals(byte[] param0) {
        final Function function = new Function(FUNC_PROPOSALS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        return new RemoteCall<Tuple7<BigInteger, BigInteger, BigInteger, String, String, BigInteger, BigInteger>>(
                new Callable<Tuple7<BigInteger, BigInteger, BigInteger, String, String, BigInteger, BigInteger>>() {
                    @Override
                    public Tuple7<BigInteger, BigInteger, BigInteger, String, String, BigInteger, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple7<BigInteger, BigInteger, BigInteger, String, String, BigInteger, BigInteger>(
                                (BigInteger) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue(), 
                                (BigInteger) results.get(2).getValue(), 
                                (String) results.get(3).getValue(), 
                                (String) results.get(4).getValue(), 
                                (BigInteger) results.get(5).getValue(), 
                                (BigInteger) results.get(6).getValue());
                    }
                });
    }

    public RemoteCall<Tuple5<BigInteger, String, Boolean, BigInteger, BigInteger>> challenges(BigInteger param0) {
        final Function function = new Function(FUNC_CHALLENGES, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Address>() {}, new TypeReference<Bool>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        return new RemoteCall<Tuple5<BigInteger, String, Boolean, BigInteger, BigInteger>>(
                new Callable<Tuple5<BigInteger, String, Boolean, BigInteger, BigInteger>>() {
                    @Override
                    public Tuple5<BigInteger, String, Boolean, BigInteger, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple5<BigInteger, String, Boolean, BigInteger, BigInteger>(
                                (BigInteger) results.get(0).getValue(), 
                                (String) results.get(1).getValue(), 
                                (Boolean) results.get(2).getValue(), 
                                (BigInteger) results.get(3).getValue(), 
                                (BigInteger) results.get(4).getValue());
                    }
                });
    }

    public RemoteCall<BigInteger> params(byte[] param0) {
        final Function function = new Function(FUNC_PARAMS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<String> token() {
        final Function function = new Function(FUNC_TOKEN, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<String> voting() {
        final Function function = new Function(FUNC_VOTING, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public List<_ReparameterizationProposalEventResponse> get_ReparameterizationProposalEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(_REPARAMETERIZATIONPROPOSAL_EVENT, transactionReceipt);
        ArrayList<_ReparameterizationProposalEventResponse> responses = new ArrayList<_ReparameterizationProposalEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            _ReparameterizationProposalEventResponse typedResponse = new _ReparameterizationProposalEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.proposer = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.name = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.value = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.propID = (byte[]) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.deposit = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
            typedResponse.appEndDate = (BigInteger) eventValues.getNonIndexedValues().get(4).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<_ReparameterizationProposalEventResponse> _ReparameterizationProposalEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, _ReparameterizationProposalEventResponse>() {
            @Override
            public _ReparameterizationProposalEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(_REPARAMETERIZATIONPROPOSAL_EVENT, log);
                _ReparameterizationProposalEventResponse typedResponse = new _ReparameterizationProposalEventResponse();
                typedResponse.log = log;
                typedResponse.proposer = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.name = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.value = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.propID = (byte[]) eventValues.getNonIndexedValues().get(2).getValue();
                typedResponse.deposit = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
                typedResponse.appEndDate = (BigInteger) eventValues.getNonIndexedValues().get(4).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<_ReparameterizationProposalEventResponse> _ReparameterizationProposalEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(_REPARAMETERIZATIONPROPOSAL_EVENT));
        return _ReparameterizationProposalEventFlowable(filter);
    }

    public List<_NewChallengeEventResponse> get_NewChallengeEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(_NEWCHALLENGE_EVENT, transactionReceipt);
        ArrayList<_NewChallengeEventResponse> responses = new ArrayList<_NewChallengeEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            _NewChallengeEventResponse typedResponse = new _NewChallengeEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.propID = (byte[]) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.challenger = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.challengeID = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.commitEndDate = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.revealEndDate = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<_NewChallengeEventResponse> _NewChallengeEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, _NewChallengeEventResponse>() {
            @Override
            public _NewChallengeEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(_NEWCHALLENGE_EVENT, log);
                _NewChallengeEventResponse typedResponse = new _NewChallengeEventResponse();
                typedResponse.log = log;
                typedResponse.propID = (byte[]) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.challenger = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.challengeID = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.commitEndDate = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.revealEndDate = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<_NewChallengeEventResponse> _NewChallengeEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(_NEWCHALLENGE_EVENT));
        return _NewChallengeEventFlowable(filter);
    }

    public List<_ProposalAcceptedEventResponse> get_ProposalAcceptedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(_PROPOSALACCEPTED_EVENT, transactionReceipt);
        ArrayList<_ProposalAcceptedEventResponse> responses = new ArrayList<_ProposalAcceptedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            _ProposalAcceptedEventResponse typedResponse = new _ProposalAcceptedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.propID = (byte[]) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.name = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.value = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<_ProposalAcceptedEventResponse> _ProposalAcceptedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, _ProposalAcceptedEventResponse>() {
            @Override
            public _ProposalAcceptedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(_PROPOSALACCEPTED_EVENT, log);
                _ProposalAcceptedEventResponse typedResponse = new _ProposalAcceptedEventResponse();
                typedResponse.log = log;
                typedResponse.propID = (byte[]) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.name = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.value = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<_ProposalAcceptedEventResponse> _ProposalAcceptedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(_PROPOSALACCEPTED_EVENT));
        return _ProposalAcceptedEventFlowable(filter);
    }

    public List<_ProposalExpiredEventResponse> get_ProposalExpiredEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(_PROPOSALEXPIRED_EVENT, transactionReceipt);
        ArrayList<_ProposalExpiredEventResponse> responses = new ArrayList<_ProposalExpiredEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            _ProposalExpiredEventResponse typedResponse = new _ProposalExpiredEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.propID = (byte[]) eventValues.getIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<_ProposalExpiredEventResponse> _ProposalExpiredEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, _ProposalExpiredEventResponse>() {
            @Override
            public _ProposalExpiredEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(_PROPOSALEXPIRED_EVENT, log);
                _ProposalExpiredEventResponse typedResponse = new _ProposalExpiredEventResponse();
                typedResponse.log = log;
                typedResponse.propID = (byte[]) eventValues.getIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<_ProposalExpiredEventResponse> _ProposalExpiredEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(_PROPOSALEXPIRED_EVENT));
        return _ProposalExpiredEventFlowable(filter);
    }

    public List<_ChallengeSucceededEventResponse> get_ChallengeSucceededEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(_CHALLENGESUCCEEDED_EVENT, transactionReceipt);
        ArrayList<_ChallengeSucceededEventResponse> responses = new ArrayList<_ChallengeSucceededEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            _ChallengeSucceededEventResponse typedResponse = new _ChallengeSucceededEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.propID = (byte[]) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.challengeID = (BigInteger) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.rewardPool = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.totalTokens = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<_ChallengeSucceededEventResponse> _ChallengeSucceededEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, _ChallengeSucceededEventResponse>() {
            @Override
            public _ChallengeSucceededEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(_CHALLENGESUCCEEDED_EVENT, log);
                _ChallengeSucceededEventResponse typedResponse = new _ChallengeSucceededEventResponse();
                typedResponse.log = log;
                typedResponse.propID = (byte[]) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.challengeID = (BigInteger) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.rewardPool = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.totalTokens = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<_ChallengeSucceededEventResponse> _ChallengeSucceededEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(_CHALLENGESUCCEEDED_EVENT));
        return _ChallengeSucceededEventFlowable(filter);
    }

    public List<_ChallengeFailedEventResponse> get_ChallengeFailedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(_CHALLENGEFAILED_EVENT, transactionReceipt);
        ArrayList<_ChallengeFailedEventResponse> responses = new ArrayList<_ChallengeFailedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            _ChallengeFailedEventResponse typedResponse = new _ChallengeFailedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.propID = (byte[]) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.challengeID = (BigInteger) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.rewardPool = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.totalTokens = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<_ChallengeFailedEventResponse> _ChallengeFailedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, _ChallengeFailedEventResponse>() {
            @Override
            public _ChallengeFailedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(_CHALLENGEFAILED_EVENT, log);
                _ChallengeFailedEventResponse typedResponse = new _ChallengeFailedEventResponse();
                typedResponse.log = log;
                typedResponse.propID = (byte[]) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.challengeID = (BigInteger) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.rewardPool = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.totalTokens = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<_ChallengeFailedEventResponse> _ChallengeFailedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(_CHALLENGEFAILED_EVENT));
        return _ChallengeFailedEventFlowable(filter);
    }

    public List<_RewardClaimedEventResponse> get_RewardClaimedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(_REWARDCLAIMED_EVENT, transactionReceipt);
        ArrayList<_RewardClaimedEventResponse> responses = new ArrayList<_RewardClaimedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            _RewardClaimedEventResponse typedResponse = new _RewardClaimedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.challengeID = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.voter = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.reward = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<_RewardClaimedEventResponse> _RewardClaimedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, _RewardClaimedEventResponse>() {
            @Override
            public _RewardClaimedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(_REWARDCLAIMED_EVENT, log);
                _RewardClaimedEventResponse typedResponse = new _RewardClaimedEventResponse();
                typedResponse.log = log;
                typedResponse.challengeID = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.voter = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.reward = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<_RewardClaimedEventResponse> _RewardClaimedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(_REWARDCLAIMED_EVENT));
        return _RewardClaimedEventFlowable(filter);
    }

    public RemoteCall<TransactionReceipt> proposeReparameterization(String _name, BigInteger _value) {
        final Function function = new Function(
                FUNC_PROPOSEREPARAMETERIZATION, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_name), 
                new org.web3j.abi.datatypes.generated.Uint256(_value)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> challengeReparameterization(byte[] _propID) {
        final Function function = new Function(
                FUNC_CHALLENGEREPARAMETERIZATION, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(_propID)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> processProposal(byte[] _propID) {
        final Function function = new Function(
                FUNC_PROCESSPROPOSAL, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(_propID)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> claimReward(BigInteger _challengeID, BigInteger _salt) {
        final Function function = new Function(
                FUNC_CLAIMREWARD, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_challengeID), 
                new org.web3j.abi.datatypes.generated.Uint256(_salt)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<BigInteger> voterReward(String _voter, BigInteger _challengeID, BigInteger _salt) {
        final Function function = new Function(FUNC_VOTERREWARD, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_voter), 
                new org.web3j.abi.datatypes.generated.Uint256(_challengeID), 
                new org.web3j.abi.datatypes.generated.Uint256(_salt)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<Boolean> canBeSet(byte[] _propID) {
        final Function function = new Function(FUNC_CANBESET, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(_propID)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteCall<Boolean> propExists(byte[] _propID) {
        final Function function = new Function(FUNC_PROPEXISTS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(_propID)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteCall<Boolean> challengeCanBeResolved(byte[] _propID) {
        final Function function = new Function(FUNC_CHALLENGECANBERESOLVED, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(_propID)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteCall<BigInteger> challengeWinnerReward(BigInteger _challengeID) {
        final Function function = new Function(FUNC_CHALLENGEWINNERREWARD, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_challengeID)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<BigInteger> get(String _name) {
        final Function function = new Function(FUNC_GET, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_name)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<Boolean> tokenClaims(BigInteger _challengeID, String _voter) {
        final Function function = new Function(FUNC_TOKENCLAIMS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_challengeID), 
                new org.web3j.abi.datatypes.Address(_voter)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    @Deprecated
    public static Parameterizer load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new Parameterizer(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static Parameterizer load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new Parameterizer(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static Parameterizer load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new Parameterizer(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static Parameterizer load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new Parameterizer(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<Parameterizer> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider, String _tokenAddr, String _plcrAddr, BigInteger _minDeposit, BigInteger _pMinDeposit, BigInteger _applyStageLen, BigInteger _pApplyStageLen, BigInteger _commitStageLen, BigInteger _pCommitStageLen, BigInteger _revealStageLen, BigInteger _pRevealStageLen, BigInteger _dispensationPct, BigInteger _pDispensationPct, BigInteger _voteQuorum, BigInteger _pVoteQuorum) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_tokenAddr), 
                new org.web3j.abi.datatypes.Address(_plcrAddr), 
                new org.web3j.abi.datatypes.generated.Uint256(_minDeposit), 
                new org.web3j.abi.datatypes.generated.Uint256(_pMinDeposit), 
                new org.web3j.abi.datatypes.generated.Uint256(_applyStageLen), 
                new org.web3j.abi.datatypes.generated.Uint256(_pApplyStageLen), 
                new org.web3j.abi.datatypes.generated.Uint256(_commitStageLen), 
                new org.web3j.abi.datatypes.generated.Uint256(_pCommitStageLen), 
                new org.web3j.abi.datatypes.generated.Uint256(_revealStageLen), 
                new org.web3j.abi.datatypes.generated.Uint256(_pRevealStageLen), 
                new org.web3j.abi.datatypes.generated.Uint256(_dispensationPct), 
                new org.web3j.abi.datatypes.generated.Uint256(_pDispensationPct), 
                new org.web3j.abi.datatypes.generated.Uint256(_voteQuorum), 
                new org.web3j.abi.datatypes.generated.Uint256(_pVoteQuorum)));
        return deployRemoteCall(Parameterizer.class, web3j, credentials, contractGasProvider, BINARY, encodedConstructor);
    }

    public static RemoteCall<Parameterizer> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider, String _tokenAddr, String _plcrAddr, BigInteger _minDeposit, BigInteger _pMinDeposit, BigInteger _applyStageLen, BigInteger _pApplyStageLen, BigInteger _commitStageLen, BigInteger _pCommitStageLen, BigInteger _revealStageLen, BigInteger _pRevealStageLen, BigInteger _dispensationPct, BigInteger _pDispensationPct, BigInteger _voteQuorum, BigInteger _pVoteQuorum) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_tokenAddr), 
                new org.web3j.abi.datatypes.Address(_plcrAddr), 
                new org.web3j.abi.datatypes.generated.Uint256(_minDeposit), 
                new org.web3j.abi.datatypes.generated.Uint256(_pMinDeposit), 
                new org.web3j.abi.datatypes.generated.Uint256(_applyStageLen), 
                new org.web3j.abi.datatypes.generated.Uint256(_pApplyStageLen), 
                new org.web3j.abi.datatypes.generated.Uint256(_commitStageLen), 
                new org.web3j.abi.datatypes.generated.Uint256(_pCommitStageLen), 
                new org.web3j.abi.datatypes.generated.Uint256(_revealStageLen), 
                new org.web3j.abi.datatypes.generated.Uint256(_pRevealStageLen), 
                new org.web3j.abi.datatypes.generated.Uint256(_dispensationPct), 
                new org.web3j.abi.datatypes.generated.Uint256(_pDispensationPct), 
                new org.web3j.abi.datatypes.generated.Uint256(_voteQuorum), 
                new org.web3j.abi.datatypes.generated.Uint256(_pVoteQuorum)));
        return deployRemoteCall(Parameterizer.class, web3j, transactionManager, contractGasProvider, BINARY, encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<Parameterizer> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit, String _tokenAddr, String _plcrAddr, BigInteger _minDeposit, BigInteger _pMinDeposit, BigInteger _applyStageLen, BigInteger _pApplyStageLen, BigInteger _commitStageLen, BigInteger _pCommitStageLen, BigInteger _revealStageLen, BigInteger _pRevealStageLen, BigInteger _dispensationPct, BigInteger _pDispensationPct, BigInteger _voteQuorum, BigInteger _pVoteQuorum) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_tokenAddr), 
                new org.web3j.abi.datatypes.Address(_plcrAddr), 
                new org.web3j.abi.datatypes.generated.Uint256(_minDeposit), 
                new org.web3j.abi.datatypes.generated.Uint256(_pMinDeposit), 
                new org.web3j.abi.datatypes.generated.Uint256(_applyStageLen), 
                new org.web3j.abi.datatypes.generated.Uint256(_pApplyStageLen), 
                new org.web3j.abi.datatypes.generated.Uint256(_commitStageLen), 
                new org.web3j.abi.datatypes.generated.Uint256(_pCommitStageLen), 
                new org.web3j.abi.datatypes.generated.Uint256(_revealStageLen), 
                new org.web3j.abi.datatypes.generated.Uint256(_pRevealStageLen), 
                new org.web3j.abi.datatypes.generated.Uint256(_dispensationPct), 
                new org.web3j.abi.datatypes.generated.Uint256(_pDispensationPct), 
                new org.web3j.abi.datatypes.generated.Uint256(_voteQuorum), 
                new org.web3j.abi.datatypes.generated.Uint256(_pVoteQuorum)));
        return deployRemoteCall(Parameterizer.class, web3j, credentials, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<Parameterizer> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit, String _tokenAddr, String _plcrAddr, BigInteger _minDeposit, BigInteger _pMinDeposit, BigInteger _applyStageLen, BigInteger _pApplyStageLen, BigInteger _commitStageLen, BigInteger _pCommitStageLen, BigInteger _revealStageLen, BigInteger _pRevealStageLen, BigInteger _dispensationPct, BigInteger _pDispensationPct, BigInteger _voteQuorum, BigInteger _pVoteQuorum) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_tokenAddr), 
                new org.web3j.abi.datatypes.Address(_plcrAddr), 
                new org.web3j.abi.datatypes.generated.Uint256(_minDeposit), 
                new org.web3j.abi.datatypes.generated.Uint256(_pMinDeposit), 
                new org.web3j.abi.datatypes.generated.Uint256(_applyStageLen), 
                new org.web3j.abi.datatypes.generated.Uint256(_pApplyStageLen), 
                new org.web3j.abi.datatypes.generated.Uint256(_commitStageLen), 
                new org.web3j.abi.datatypes.generated.Uint256(_pCommitStageLen), 
                new org.web3j.abi.datatypes.generated.Uint256(_revealStageLen), 
                new org.web3j.abi.datatypes.generated.Uint256(_pRevealStageLen), 
                new org.web3j.abi.datatypes.generated.Uint256(_dispensationPct), 
                new org.web3j.abi.datatypes.generated.Uint256(_pDispensationPct), 
                new org.web3j.abi.datatypes.generated.Uint256(_voteQuorum), 
                new org.web3j.abi.datatypes.generated.Uint256(_pVoteQuorum)));
        return deployRemoteCall(Parameterizer.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    protected String getStaticDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }

    public static String getPreviouslyDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }

    public static class _ReparameterizationProposalEventResponse {
        public Log log;

        public String proposer;

        public String name;

        public BigInteger value;

        public byte[] propID;

        public BigInteger deposit;

        public BigInteger appEndDate;
    }

    public static class _NewChallengeEventResponse {
        public Log log;

        public byte[] propID;

        public String challenger;

        public BigInteger challengeID;

        public BigInteger commitEndDate;

        public BigInteger revealEndDate;
    }

    public static class _ProposalAcceptedEventResponse {
        public Log log;

        public byte[] propID;

        public String name;

        public BigInteger value;
    }

    public static class _ProposalExpiredEventResponse {
        public Log log;

        public byte[] propID;
    }

    public static class _ChallengeSucceededEventResponse {
        public Log log;

        public byte[] propID;

        public BigInteger challengeID;

        public BigInteger rewardPool;

        public BigInteger totalTokens;
    }

    public static class _ChallengeFailedEventResponse {
        public Log log;

        public byte[] propID;

        public BigInteger challengeID;

        public BigInteger rewardPool;

        public BigInteger totalTokens;
    }

    public static class _RewardClaimedEventResponse {
        public Log log;

        public BigInteger challengeID;

        public String voter;

        public BigInteger reward;
    }
}
