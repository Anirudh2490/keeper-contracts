package com.oceanprotocol.keeper.contracts;

import io.reactivex.Flowable;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.FunctionEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Bytes32;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.abi.datatypes.generated.Uint32;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple3;
import org.web3j.tuples.generated.Tuple5;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 4.0.1.
 */
public class Market extends Contract {
    private static final String BINARY = "0x60c0604052600360808190527f302e33000000000000000000000000000000000000000000000000000000000060a0908152620000409160009190620009fd565b506040805180820190915260038082527f302e33000000000000000000000000000000000000000000000000000000000060209092019182526200008791608191620009fd565b50600a6089556001608a55608b805463ffffffff19166207a1201790556000608c819055608e55348015620000bb57600080fd5b5060405160408062002f4583398101604090815281516020909201516001606060020a641c35fedd1502036021556001605e60020a646c3390ecc902036022556001606160020a640cf801476102036023556001605f60020a6431bdb23e1d02036024556001605b60020a6502fb1d8fe08302036025556001605a60020a6505b771955b3702036026556001605960020a650af67a93bb5102036027556001605860020a6515060c256cb302036028556001605860020a651428a2f98d7302036029556001605660020a654d51566397090203602a556001605560020a65944620b0e70f0203602b557011c592761c666fffffffffffffffffffff602c5570110a688680a757ffffffffffffffffffff602d55701056f1b5bedf77ffffffffffffffffffff602e55700faadceceeff8bffffffffffffffffffff602f55700f05dc6b27edadffffffffffffffffffff603055700e67a5a25da4107fffffffffffffffffff603155700dcff115b14eedffffffffffffffffffff603255700d3e7a392431239fffffffffffffffffff603355700cb2ff529eb71e4fffffffffffffffffff603455700c2d415c3db974afffffffffffffffffff603555700bad03e7d883f69bffffffffffffffffff603655700b320d03b2c343d5ffffffffffffffffff603755700abc25204e02828dffffffffffffffffff603855700a4b16f74ee4bb207fffffffffffffffff6039557009deaf736ac1f569ffffffffffffffffff603a55700976bd9952c7aa957fffffffffffffffff603b557009131271922eaa606fffffffffffffffff603c557008b380f3558668c46fffffffffffffffff603d55700857ddf0117efa215bffffffffffffffff603e556001608360020a03603f557007abbf6f6abb9d087fffffffffffffffff90915570075af62cbac95f7dfa7fffffffffffffff60415570070d7fb7452e187ac13fffffffffffffff6042557006c3390ecc8af379295fffffffffffffff60435570067c00a3b07ffc01fd6fffffffffffffff604455700637b647c39cbb9d3d27ffffffffffffff6045557005f63b1fc104dbd39587ffffffffffffff6046557005b771955b36e12f7235ffffffffffffff60475570057b3d49dda84556d6f6ffffffffffffff60485570054183095b2c8ececf30ffffffffffffff60495570050a28be635ca2b888f77fffffffffffff604a557004d5156639708c9db33c3fffffffffffff604b557004a23105873875bd52dfdfffffffffffff604c55700471649d87199aa990756fffffffffffff604d557004429a21a029d4c1457cfbffffffffffff604e55700415bc6d6fb7dd71af2cb3ffffffffffff604f557003eab73b3bbfe282243ce1ffffffffffff6050557003c1771ac9fb6b4c18e229ffffffffffff605155700399e96897690418f785257fffffffffff605255700373fc456c53bb779bf0ea9fffffffffff60535570034f9e8e490c48e67e6ab8bfffffffffff60545570032cbfd4a7adc790560b3337ffffffffff60555570030b50570f6e5d2acca94613ffffffffff6056557002eb40f9f620fda6b56c2861ffffffffff6057557002cc8340ecb0d0f520a6af58ffffffffff6058557002af09481380a0a35cf1ba02ffffffffff605955700292c5bdd3b92ec810287b1b3fffffffff605a55700277abdcdab07d5a77ac6d6b9fffffffff605b5570025daf6654b1eaa55fd64df5efffffffff605c55700244c49c648baa98192dce88b7ffffffff605d5570022ce03cd5619a311b2471268bffffffff605e55700215f77c045fbe885654a44a0fffffffff605f556001608160020a036060557001eaefdbdaaee7421fc4d3ede5ffffffff6061557001d6bd8b2eb257df7e8ca57b09bfffffff6062557001c35fedd14b861eb0443f7f133fffffff6063557001b0ce43b322bcde4a56e8ada5afffffff60645570019f0028ec1fff007f5a195a39dfffffff60655570018ded91f0e72ee74f49b15ba527ffffff60665570017d8ec7f04136f4e5615fd41a63ffffff60675570016ddc6556cdb84bdc8d12d22e6fffffff60685570015ecf52776a1155b5bd8395814f7fffff60695570015060c256cb23b3b3cc3754cf40ffffff606a557001428a2f98d728ae223ddab715be3fffff606b5570013545598e5c23276ccf0ede68034fffff606c557001288c4161ce1d6f54b7f61081194fffff606d5570011c592761c666aa641d5a01a40f17ffff606e55700110a688680a7530515f3e6e6cfdcdffff606f557001056f1b5bedf75c6bcb2ce8aed428ffff6070556ffaadceceeff8a0890f3875f008277fff6071556ff05dc6b27edad306388a600f6ba0bfff6072556fe67a5a25da41063de1495d5b18cdbfff6073556fdcff115b14eedde6fc3aa5353f2e4fff6074556fd3e7a3924312399f9aae2e0f868f8fff6075556fcb2ff529eb71e41582cccd5a1ee26fff6076556fc2d415c3db974ab32a51840c0b67edff6077556fbad03e7d883f69ad5b0a186184e06bff6078556fb320d03b2c343d4829abd6075f0cc5ff6079556fabc25204e02828d73c6e80bcdb1a95bf607a556fa4b16f74ee4bb2040a1ec6c15fbbf2df607b556f9deaf736ac1f569deb1b5ae3f36c130f607c556f976bd9952c7aa957f5937d790ef65037607d556f9131271922eaa6064b73a22d0bd4f2bf607e556f8b380f3558668c46c91c49a2f8e967b9607f556f857ddf0117efa215952912839f6473e660805560828054600160a060020a03191633179055600160a060020a0382161515620008a157600080fd5b60868054600160a060020a03808516600160a060020a03199283161792839055608d8054858316931692909217909155604080517f718da7ee0000000000000000000000000000000000000000000000000000000081523060048201529051929091169163718da7ee916024808201926020929091908290030181600087803b1580156200092e57600080fd5b505af115801562000943573d6000803e3d6000fd5b505050506040513d60208110156200095a57600080fd5b5050608654604080517f70a082310000000000000000000000000000000000000000000000000000000081523060048201529051600160a060020a03909216916370a08231916024808201926020929091908290030181600087803b158015620009c357600080fd5b505af1158015620009d8573d6000803e3d6000fd5b505050506040513d6020811015620009ef57600080fd5b50516087555062000aa29050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1062000a4057805160ff191683800117855562000a70565b8280016001018555821562000a70579182015b8281111562000a7057825182559160200191906001019062000a53565b5062000a7e92915062000a82565b5090565b62000a9f91905b8082111562000a7e576000815560010162000a89565b90565b6124938062000ab26000396000f3006080604052600436106101e25763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416630206ed9d81146101e757806302780677146102165780630a46b01c1461023d5780630c7d5cd81461025557806310a4b2ad146102835780631642cfbb1461029e57806318160ddd146102e75780632004ffd9146102fc57806324902e241461031157806329a00e7c1461032657806329bda7821461034d5780633ccfd60b1461039c57806348e68950146103b157806349d32de1146103c957806349f9b0f7146103fb57806354fd4d501461042257806357e25e25146104ac57806360ffee42146104c757806361bc221a146104df57806366666aa9146104f45780636abfd46c1461050957806376559e2d146105625780637aa1ed581461057757806396365d441461058f5780639dcdad21146105095780639e1a4d19146105a4578063c026e36f146105b9578063c2ee3a08146105d1578063c3b6f939146105e6578063c438aeb514610617578063cbafee8a1461062c578063d09de08a14610641578063dabad80314610656578063dcda4bf31461066e578063ddbdc46114610683578063de8f8b3f1461069e578063eef9c27c146106b6578063f2fde38b146106ce578063ff3617f8146106f1575b600080fd5b3480156101f357600080fd5b5061020260043560243561070c565b604080519115158252519081900360200190f35b34801561022257600080fd5b5061022b6107c7565b60408051918252519081900360200190f35b34801561024957600080fd5b506102026004356107d3565b34801561026157600080fd5b5061026a610801565b6040805163ffffffff9092168252519081900360200190f35b34801561028f57600080fd5b5061022b60043560243561080d565b3480156102aa57600080fd5b506102bf600160a060020a03600435166109f6565b60408051600160a060020a039094168452602084019290925282820152519081900360600190f35b3480156102f357600080fd5b5061022b610a21565b34801561030857600080fd5b5061022b610a27565b34801561031d57600080fd5b5061022b610c3d565b34801561033257600080fd5b5061022b60043560243563ffffffff60443516606435610c4a565b34801561035957600080fd5b50610365600435610d2f565b60408051600160a060020a039096168652602086019490945284840192909252606084015215156080830152519081900360a00190f35b3480156103a857600080fd5b50610202610d6b565b3480156103bd57600080fd5b50610202600435610e87565b3480156103d557600080fd5b50610202600435600160a060020a03602435811690604435906064359060843516610ef8565b34801561040757600080fd5b5061022b60043560243563ffffffff6044351660643561110a565b34801561042e57600080fd5b50610437611206565b6040805160208082528351818301528351919283929083019185019080838360005b83811015610471578181015183820152602001610459565b50505050905090810190601f16801561049e5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156104b857600080fd5b50610202600435602435611294565b3480156104d357600080fd5b5061020260043561132d565b3480156104eb57600080fd5b5061022b611345565b34801561050057600080fd5b5061022b61134b565b34801561051557600080fd5b506040805160206004803580820135601f810184900484028501840190955284845261022b9436949293602493928401919081908401838280828437509497506113519650505050505050565b34801561056e57600080fd5b5061022b6113b5565b34801561058357600080fd5b506102026004356113bb565b34801561059b57600080fd5b5061022b611539565b3480156105b057600080fd5b5061022b61153f565b3480156105c557600080fd5b5061020260043561157c565b3480156105dd57600080fd5b5061022b6115a1565b3480156105f257600080fd5b506105fb6115ae565b60408051600160a060020a039092168252519081900360200190f35b34801561062357600080fd5b506105fb6115bd565b34801561063857600080fd5b5061022b6115cc565b34801561064d57600080fd5b506102026115d2565b34801561066257600080fd5b5061022b6004356115f1565b34801561067a57600080fd5b506105fb611622565b34801561068f57600080fd5b5061022b600435602435611631565b3480156106aa57600080fd5b5061020260043561191b565b3480156106c257600080fd5b5061022b600435611a93565b3480156106da57600080fd5b506106ef600160a060020a0360043516611b69565b005b3480156106fd57600080fd5b50610202600435602435611bc4565b608d54604080517f01a5e3fe000000000000000000000000000000000000000000000000000000008152600481018590529051600092600160a060020a0316916301a5e3fe91602480830192602092919082900301818787803b15801561077257600080fd5b505af1158015610786573d6000803e3d6000fd5b505050506040513d602081101561079c57600080fd5b505115156107be576000828152608360205260409020600401805460ff191690555b50600192915050565b67b17217f7d1cf79ac81565b600081815260836020526040812054600160a060020a0316156107f8575060006107fc565b5060015b919050565b608b5463ffffffff1681565b336000908152608460205260408120548190600160a060020a031680151561083457600080fd5b60008581526083602052604090206001810154600290910154608b5461086292919063ffffffff168761110a565b600086815260836020526040902060010154909250610887908563ffffffff611d3b16565b60008681526083602052604090206001810191909155600201546108b1908363ffffffff611d3b16565b6000868152608360205260409020600201556089546108d6908563ffffffff611d3b16565b608955608a546108ec908363ffffffff611d3b16565b608a5533600090815260846020526040902060010154610912908363ffffffff611d4d16565b33600090815260846020526040902060018101919091556002015461093d908363ffffffff611d4d16565b33600090815260846020526040902060020155608754610963908363ffffffff611d4d16565b6087556000858152608360209081526040808320338452600501909152902054610993908563ffffffff611d3b16565b6000868152608360209081526040808320338085526005909101835292819020939093558251858152908101879052825188937f19bf38f62447c16220311cdc3e278cab166565e0fe3c054ae234aef8da9df54d928290030190a3509392505050565b608460205260009081526040902080546001820154600290920154600160a060020a03909116919083565b60895481565b608654604080517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152905160009283928392600160a060020a03909216916370a082319160248082019260209290919082900301818787803b158015610a9357600080fd5b505af1158015610aa7573d6000803e3d6000fd5b505050506040513d6020811015610abd57600080fd5b5051608654604080517fc89aee830000000000000000000000000000000000000000000000000000000081529051929450600160a060020a039091169163c89aee83916004808201926020929091908290030181600087803b158015610b2257600080fd5b505af1158015610b36573d6000803e3d6000fd5b505050506040513d6020811015610b4c57600080fd5b50511515610b5957600080fd5b608654604080517f70a082310000000000000000000000000000000000000000000000000000000081523060048201529051600160a060020a03909216916370a08231916024808201926020929091908290030181600087803b158015610bbf57600080fd5b505af1158015610bd3573d6000803e3d6000fd5b505050506040513d6020811015610be957600080fd5b50519050610c0f610c00828463ffffffff611d3b16565b6088549063ffffffff611d4d16565b608855610c34610c25828463ffffffff611d3b16565b6087549063ffffffff611d4d16565b60875591505090565b680171547652b82fe17781565b60008060008060008089118015610c615750600088115b8015610c73575060008763ffffffff16115b8015610c885750620f424063ffffffff881611155b1515610c9357600080fd5b851515610ca35760009450610d23565b63ffffffff8716620f42401415610cdb57610cd488610cc88b8963ffffffff611d6316565b9063ffffffff611d8716565b9450610d23565b610ceb868963ffffffff611d4d16565b9150610cfc828989620f4240611d9e565b909450925060ff8316610d158a8663ffffffff611d6316565b9060020a9004905088810394505b50505050949350505050565b60836020526000908152604090208054600182015460028301546003840154600490940154600160a060020a0390931693919290919060ff1685565b336000908152608460205260408120600101805490829055608754610d96908263ffffffff611d3b16565b5033600090815260846020526040902060020154610dba908263ffffffff611d3b16565b506086546040805160e060020a63a9059cbb028152336004820152602481018490529051600160a060020a039092169163a9059cbb916044808201926020929091908290030181600087803b158015610e1257600080fd5b505af1158015610e26573d6000803e3d6000fd5b505050506040513d6020811015610e3c57600080fd5b50511515610e4957600080fd5b60408051828152905133917f68577e4d693c1b056a60bc4e39438810239a0bfe64869c4eb7e3baebb5f65634919081900360200190a2600191505090565b60008060008381526085602052604090206001015460a060020a900460ff166002811115610eb157fe5b1480610ee35750600160008381526085602052604090206001015460a060020a900460ff166002811115610ee157fe5b145b15610ef0575060016107fc565b506000919050565b600033801515610f0757600080fd5b608654604080517f23b872dd000000000000000000000000000000000000000000000000000000008152336004820152306024820152604481018890529051600160a060020a03909216916323b872dd916064808201926020929091908290030181600087803b158015610f7a57600080fd5b505af1158015610f8e573d6000803e3d6000fd5b505050506040513d6020811015610fa457600080fd5b50511515610fb157600080fd5b6040805160e081018252338152600160a060020a0388811660208084019182526000848601818152606086018c905242608087015260a086018b905289851660c08701528d82526085909252949094208351815490841673ffffffffffffffffffffffffffffffffffffffff19918216178255915160018201805491909416921691909117808355935192939092919074ff0000000000000000000000000000000000000000191660a060020a83600281111561106a57fe5b0217905550606082015160028201556080820151600382015560a0820151600482015560c0909101516005909101805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392831617905560408051878152602081018790528151928916928a927fb84982556d7cb15bbbde57cf4d92e7e35098afd173f6b52783916ffd21f49fab928290030190a35060019695505050505050565b60008060008060008060008a1180156111235750600089115b8015611135575060008863ffffffff16115b801561114a5750620f424063ffffffff891611155b80156111565750898711155b151561116157600080fd5b86151561117157600095506111f9565b89871415611181578895506111f9565b63ffffffff8816620f424014156111ad576111a68a610cc88b8a63ffffffff611d6316565b95506111f9565b868a0392506111c18a84620f42408b611d9e565b90955093506111d6898663ffffffff611d6316565b91505060ff831660020a88026111f685610cc8848463ffffffff611d3b16565b95505b5050505050949350505050565b6081805460408051602060026001851615610100026000190190941693909304601f8101849004840282018401909252818152929183018282801561128c5780601f106112615761010080835404028352916020019161128c565b820191906000526020600020905b81548152906001019060200180831161126f57829003601f168201915b505050505081565b608d54604080517f01a5e3fe000000000000000000000000000000000000000000000000000000008152600481018590529051600092600160a060020a0316916301a5e3fe91602480830192602092919082900301818787803b1580156112fa57600080fd5b505af115801561130e573d6000803e3d6000fd5b505050506040513d602081101561132457600080fd5b50519392505050565b60009081526083602052604090206004015460ff1690565b608e5481565b60885481565b6000816040518082805190602001908083835b602083106113835780518252601f199092019160209182019101611364565b5181516020939093036101000a6000190180199091169216919091179052604051920182900390912095945050505050565b60875481565b6000818160008281526085602052604090206001015460a060020a900460ff1660028111156113e657fe5b146113f057600080fd5b6000838152608560205260409020600501548390600160a060020a0316331461141857600080fd5b600160008581526085602052604090206001015460a060020a900460ff16600281111561144157fe5b505060865460008581526085602090815260408083206001810154600290910154825160e060020a63a9059cbb028152600160a060020a0392831660048201526024810191909152915194169363a9059cbb93604480840194938390030190829087803b1580156114b157600080fd5b505af11580156114c5573d6000803e3d6000fd5b505050506040513d60208110156114db57600080fd5b505115156114e857600080fd5b600084815260856020526040808220600101549051600160a060020a039091169186917f52b6070d69e63ffe5295e46cfc2a5fb7ad893d5eebc4ace196a8e361fcd576259190a35060019392505050565b608a5481565b33600090815260846020526040812054600160a060020a031680151561156457600080fd5b50503360009081526084602052604090206001015490565b600081815260836020526040812054600160a060020a031615610ef0575060016107fc565b6801000000000000000081565b608654600160a060020a031681565b608d54600160a060020a031681565b608c5481565b608e546000906115e990600163ffffffff611d4d16565b506001905090565b60003380151561160057600080fd5b5050600090815260836020908152604080832033845260050190915290205490565b608254600160a060020a031681565b60008281526083602052604081206001810154600290910154608b5461165f92919063ffffffff1685610c4a565b608c8190556000848152608360205260409020600101546116859163ffffffff611d4d16565b60008481526083602052604090206001810191909155600201546116af908363ffffffff611d4d16565b6000848152608360209081526040808320600201939093553382526084905220600101546116e3908363ffffffff611d4d16565b33600090815260846020526040902060018101919091556002015461170e908363ffffffff611d4d16565b33600090815260846020526040902060020155608754611734908363ffffffff611d4d16565b608755608654604080517f23b872dd000000000000000000000000000000000000000000000000000000008152336004820152306024820152604481018590529051600160a060020a03909216916323b872dd916064808201926020929091908290030181600087803b1580156117aa57600080fd5b505af11580156117be573d6000803e3d6000fd5b505050506040513d60208110156117d457600080fd5b505115156117e157600080fd5b608c546089546117f69163ffffffff611d4d16565b608955608a5461180c908363ffffffff611d4d16565b608a5533600090815260846020526040902060010154611832908363ffffffff611d3b16565b33600090815260846020526040902060018101919091556002015461185d908363ffffffff611d3b16565b33600090815260846020526040902060020155608754611883908363ffffffff611d3b16565b608755608c5460008481526083602090815260408083203384526005019091529020546118b59163ffffffff611d4d16565b600084815260836020908152604080832033808552600590910183529281902093909355608c54835186815291820152825186937fc6e4a9aaa4181e48302123736f0682d1d0e7d637de6e17904ecceb907c1375c9928290030190a350608c5492915050565b6000818160008281526085602052604090206001015460a060020a900460ff16600281111561194657fe5b1461195057600080fd5b6000838152608560205260409020600501548390600160a060020a0316331461197857600080fd5b600260008581526085602052604090206001015460a060020a900460ff1660028111156119a157fe5b505060865460008581526085602090815260408083208054600290910154825160e060020a63a9059cbb028152600160a060020a0392831660048201526024810191909152915194169363a9059cbb93604480840194938390030190829087803b158015611a0e57600080fd5b505af1158015611a22573d6000803e3d6000fd5b505050506040513d6020811015611a3857600080fd5b50511515611a4557600080fd5b600084815260856020526040808220549051600160a060020a039091169186917f2182341bbb7a7eb7e21f6cf41027bb46fb2704e3d38c5164aaa0e4fb9b58c22b9190a35060019392505050565b60008033801515611aa357600080fd5b608754600092508411611ab857839150611abe565b60875491505b608754611ad1908363ffffffff611d3b16565b6087556086546040805160e060020a63a9059cbb028152336004820152602481018590529051600160a060020a039092169163a9059cbb916044808201926020929091908290030181600087803b158015611b2b57600080fd5b505af1158015611b3f573d6000803e3d6000fd5b505050506040513d6020811015611b5557600080fd5b50511515611b6257600080fd5b5092915050565b608254600160a060020a03163314611b8057600080fd5b600160a060020a0381161515611b9557600080fd5b6082805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600033801515611bd357600080fd5b600084815260836020526040902054600160a060020a031615611bf557600080fd5b33600090815260846020526040902054600160a060020a03161515611c765760408051606081018252338082526000602080840182815284860183815293835260849091529390209151825473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a039091161782559151600182015590516002909101555b6040805160a08101825233808252600a60208084019182526001848601818152606086018a81526000608088018181528d8252608390955288812097518854600160a060020a039190911673ffffffffffffffffffffffffffffffffffffffff199091161788559451878401559051600287015551600386015590516004909401805494151560ff199586161790941617909255915186917f7b8c7b505365aa1b7f9ce04295e6da7c743d877f121b9debcf6a8a9d1806ce4691a35060019392505050565b600082821115611d4757fe5b50900390565b600082820183811015611d5c57fe5b9392505050565b6000828202831580611d7f5750828482811515611d7c57fe5b04145b1515611d5c57fe5b6000808284811515611d9557fe5b04949350505050565b6000806000808463ffffffff168663ffffffff16611dbc8a8a611df7565b02811515611dc657fe5b049150611dd282611f3a565b9050611dea60ff607f8390031660020a830482611fd1565b9890975095505050505050565b6000808080807001ffffffffffffffffffffffffffffffff871115611e1857fe5b60009350856f800000000000000000000000000000008802811515611e3957fe5b0492507001000000000000000000000000000000008310611e9257611e6f6f8000000000000000000000000000000084046123f4565b60ff81166f800000000000000000000000000000008102955060020a9093049291505b6f80000000000000000000000000000000831115611f095750607f5b60008160ff161115611f09576f800000000000000000000000000000008380020492507001000000000000000000000000000000008310611f005760ff600019820116600290810a9490940193909204915b60001901611eae565b6f040000000000000000000000000000006f02c5c85fdf473de6af278ece600fcbda85020494505050505092915050565b60006020607f825b8160ff168360010160ff161015611f8757600260ff8484011604905084600160ff831660808110611f6f57fe5b015410611f7e57809250611f82565b8091505b611f42565b84600160ff841660808110611f9857fe5b015410611fa757819350611fc9565b84600160ff851660808110611fb857fe5b015410611fc757829350611fc9565bfe5b505050919050565b6000806000849150600090508360ff168583029060020a90049150816f03442c4e6074a82f1797f72ac000000002810190508360ff168583029060020a90049150816f0116b96f757c380fb287fd0e4000000002810190508360ff168583029060020a90049150816e45ae5bdd5f0e03eca1ff439000000002810190508360ff168583029060020a90049150816e0defabf91302cd95b9ffda5000000002810190508360ff168583029060020a90049150816e02529ca9832b22439efff9b800000002810190508360ff168583029060020a90049150816d54f1cf12bd04e516b6da8800000002810190508360ff168583029060020a90049150816d0a9e39e257a09ca2d6db5100000002810190508360ff168583029060020a90049150816d012e066e7b839fa050c30900000002810190508360ff168583029060020a90049150816c1e33d7d926c329a1ad1a80000002810190508360ff168583029060020a90049150816c02bee513bdb4a6b19b5f80000002810190508360ff168583029060020a90049150816b3a9316fa79b88eccf2a0000002810190508360ff168583029060020a90049150816b048177ebe1fa81237520000002810190508360ff168583029060020a90049150816a5263fe90242dcbacf0000002810190508360ff168583029060020a90049150816a057e22099c030d9410000002810190508360ff168583029060020a90049150816957e22099c030d941000002810190508360ff168583029060020a900491508169052b6b5456997631000002810190508360ff168583029060020a9004915081684985f67696bf74800002810190508360ff168583029060020a90049150816803dea12ea99e49800002810190508360ff168583029060020a90049150816731880f2214b6e00002810190508360ff168583029060020a900491508167025bcff56eb3600002810190508360ff168583029060020a9004915081661b722e10ab100002810190508360ff168583029060020a90049150816601317c7007700002810190508360ff168583029060020a9004915081650cba84aafa0002810190508360ff168583029060020a90049150816482573a0a0002810190508360ff168583029060020a90049150816405035ad90002810190508360ff168583029060020a9004915081632f881b0002810190508360ff168583029060020a90049150816301b2934002810190508360ff168583029060020a9004915081620efc4002810190508360ff168583029060020a9004915081617fe002810190508360ff168583029060020a900491508161042002810190508360ff168583029060020a9004915081602102810190508360ff168583029060020a9004915081600102810190508360ff1660019060020a02856f0688589cc0e9505e2f2fee5580000000838115156123e857fe5b04010195945050505050565b6000808281610100821015612424575b600182111561241f5760019290920191600290910490612404565b61245e565b5060805b60008160ff16111561245e5760ff811660020a8210612451579182179160ff811660020a909104905b600260ff90911604612428565b509093925050505600a165627a7a72305820b72829fe6da49ce53f8eb192e3e494380232910365badcb68bf1d5b7fcfd3bd40029";

    public static final String FUNC_LN2 = "LN2";

    public static final String FUNC_RESERVERATIO = "reserveRatio";

    public static final String FUNC_MPROVIDERS = "mProviders";

    public static final String FUNC_TOTALSUPPLY = "totalSupply";

    public static final String FUNC_LOG2_E = "LOG2_E";

    public static final String FUNC_CALCULATEPURCHASERETURN = "calculatePurchaseReturn";

    public static final String FUNC_MASSETS = "mAssets";

    public static final String FUNC_CALCULATESALERETURN = "calculateSaleReturn";

    public static final String FUNC_VERSION = "version";

    public static final String FUNC_COUNTER = "counter";

    public static final String FUNC_REWARDPOOL = "rewardPool";

    public static final String FUNC_MALLOWANCE = "mAllowance";

    public static final String FUNC_POOLBALANCE = "poolBalance";

    public static final String FUNC_ONE = "ONE";

    public static final String FUNC_MTOKEN = "mToken";

    public static final String FUNC_TCR = "tcr";

    public static final String FUNC_TOKENSTOMINT = "tokensToMint";

    public static final String FUNC_MOWNER = "mOwner";

    public static final String FUNC_TRANSFEROWNERSHIP = "transferOwnership";

    public static final String FUNC_CHECKLISTINGSTATUS = "checkListingStatus";

    public static final String FUNC_CHANGELISTINGSTATUS = "changeListingStatus";

    public static final String FUNC_CHECKUNIQUEID = "checkUniqueId";

    public static final String FUNC_CHECKVALIDID = "checkValidId";

    public static final String FUNC_DROPSBALANCE = "dropsBalance";

    public static final String FUNC_CHECKASSET = "checkAsset";

    public static final String FUNC_TOKENBALANCE = "tokenBalance";

    public static final String FUNC_REGISTER = "register";

    public static final String FUNC_SENDPAYMENT = "sendPayment";

    public static final String FUNC_RELEASEPAYMENT = "releasePayment";

    public static final String FUNC_REFUNDPAYMENT = "refundPayment";

    public static final String FUNC_VERIFYPAYMENT = "verifyPayment";

    public static final String FUNC_REQUESTTOKENS = "requestTokens";

    public static final String FUNC_WITHDRAW = "withdraw";

    public static final String FUNC_MINTTOKEN = "mintToken";

    public static final String FUNC_BUYDROPS = "buyDrops";

    public static final String FUNC_SELLDROPS = "sellDrops";

    public static final String FUNC_GENERATESTR2ID = "generateStr2Id";

    public static final String FUNC_GENERATEBYTES2ID = "generateBytes2Id";

    public static final String FUNC_INCREMENT = "increment";

    public static final Event ASSETREGISTERED_EVENT = new Event("AssetRegistered", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>(true) {}, new TypeReference<Address>(true) {}));
    ;

    public static final Event PAYMENTRECEIVED_EVENT = new Event("PaymentReceived", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event PAYMENTRELEASED_EVENT = new Event("PaymentReleased", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>(true) {}, new TypeReference<Address>(true) {}));
    ;

    public static final Event PAYMENTREFUNDED_EVENT = new Event("PaymentRefunded", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>(true) {}, new TypeReference<Address>(true) {}));
    ;

    public static final Event TOKENWITHDRAW_EVENT = new Event("TokenWithdraw", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event TOKENBUYDROPS_EVENT = new Event("TokenBuyDrops", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Bytes32>(true) {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event TOKENSELLDROPS_EVENT = new Event("TokenSellDrops", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Bytes32>(true) {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event OWNERSHIPTRANSFERRED_EVENT = new Event("OwnershipTransferred", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    protected static final HashMap<String, String> _addresses;

    static {
        _addresses = new HashMap<String, String>();
        _addresses.put("1528723162197", "0x31b01de9acfb6916e22ee0a3dcb2e401eab053ed");
        _addresses.put("1530006110174", "0xff88768657747e8ff2762d6ce32a6b63c0bd49c0");
        _addresses.put("1533040880765", "0x6d97af61006ffcebfa166a5dbb1decd86b455528");
    }

    @Deprecated
    protected Market(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected Market(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected Market(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected Market(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public RemoteCall<BigInteger> LN2() {
        final Function function = new Function(FUNC_LN2, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<BigInteger> reserveRatio() {
        final Function function = new Function(FUNC_RESERVERATIO, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint32>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<Tuple3<String, BigInteger, BigInteger>> mProviders(String param0) {
        final Function function = new Function(FUNC_MPROVIDERS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        return new RemoteCall<Tuple3<String, BigInteger, BigInteger>>(
                new Callable<Tuple3<String, BigInteger, BigInteger>>() {
                    @Override
                    public Tuple3<String, BigInteger, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple3<String, BigInteger, BigInteger>(
                                (String) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue(), 
                                (BigInteger) results.get(2).getValue());
                    }
                });
    }

    public RemoteCall<BigInteger> totalSupply() {
        final Function function = new Function(FUNC_TOTALSUPPLY, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<BigInteger> LOG2_E() {
        final Function function = new Function(FUNC_LOG2_E, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<BigInteger> calculatePurchaseReturn(BigInteger _supply, BigInteger _connectorBalance, BigInteger _connectorWeight, BigInteger _depositAmount) {
        final Function function = new Function(FUNC_CALCULATEPURCHASERETURN, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_supply), 
                new org.web3j.abi.datatypes.generated.Uint256(_connectorBalance), 
                new org.web3j.abi.datatypes.generated.Uint32(_connectorWeight), 
                new org.web3j.abi.datatypes.generated.Uint256(_depositAmount)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<Tuple5<String, BigInteger, BigInteger, BigInteger, Boolean>> mAssets(byte[] param0) {
        final Function function = new Function(FUNC_MASSETS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Bool>() {}));
        return new RemoteCall<Tuple5<String, BigInteger, BigInteger, BigInteger, Boolean>>(
                new Callable<Tuple5<String, BigInteger, BigInteger, BigInteger, Boolean>>() {
                    @Override
                    public Tuple5<String, BigInteger, BigInteger, BigInteger, Boolean> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple5<String, BigInteger, BigInteger, BigInteger, Boolean>(
                                (String) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue(), 
                                (BigInteger) results.get(2).getValue(), 
                                (BigInteger) results.get(3).getValue(), 
                                (Boolean) results.get(4).getValue());
                    }
                });
    }

    public RemoteCall<BigInteger> calculateSaleReturn(BigInteger _supply, BigInteger _connectorBalance, BigInteger _connectorWeight, BigInteger _sellAmount) {
        final Function function = new Function(FUNC_CALCULATESALERETURN, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_supply), 
                new org.web3j.abi.datatypes.generated.Uint256(_connectorBalance), 
                new org.web3j.abi.datatypes.generated.Uint32(_connectorWeight), 
                new org.web3j.abi.datatypes.generated.Uint256(_sellAmount)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<String> version() {
        final Function function = new Function(FUNC_VERSION, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<BigInteger> counter() {
        final Function function = new Function(FUNC_COUNTER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<BigInteger> rewardPool() {
        final Function function = new Function(FUNC_REWARDPOOL, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<BigInteger> mAllowance() {
        final Function function = new Function(FUNC_MALLOWANCE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<BigInteger> poolBalance() {
        final Function function = new Function(FUNC_POOLBALANCE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<BigInteger> ONE() {
        final Function function = new Function(FUNC_ONE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<String> mToken() {
        final Function function = new Function(FUNC_MTOKEN, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<String> tcr() {
        final Function function = new Function(FUNC_TCR, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<BigInteger> tokensToMint() {
        final Function function = new Function(FUNC_TOKENSTOMINT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<String> mOwner() {
        final Function function = new Function(FUNC_MOWNER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<TransactionReceipt> transferOwnership(String _newOwner) {
        final Function function = new Function(
                FUNC_TRANSFEROWNERSHIP, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_newOwner)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public List<AssetRegisteredEventResponse> getAssetRegisteredEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(ASSETREGISTERED_EVENT, transactionReceipt);
        ArrayList<AssetRegisteredEventResponse> responses = new ArrayList<AssetRegisteredEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            AssetRegisteredEventResponse typedResponse = new AssetRegisteredEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._assetId = (byte[]) eventValues.getIndexedValues().get(0).getValue();
            typedResponse._owner = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<AssetRegisteredEventResponse> assetRegisteredEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, AssetRegisteredEventResponse>() {
            @Override
            public AssetRegisteredEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(ASSETREGISTERED_EVENT, log);
                AssetRegisteredEventResponse typedResponse = new AssetRegisteredEventResponse();
                typedResponse.log = log;
                typedResponse._assetId = (byte[]) eventValues.getIndexedValues().get(0).getValue();
                typedResponse._owner = (String) eventValues.getIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<AssetRegisteredEventResponse> assetRegisteredEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ASSETREGISTERED_EVENT));
        return assetRegisteredEventFlowable(filter);
    }

    public List<PaymentReceivedEventResponse> getPaymentReceivedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(PAYMENTRECEIVED_EVENT, transactionReceipt);
        ArrayList<PaymentReceivedEventResponse> responses = new ArrayList<PaymentReceivedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            PaymentReceivedEventResponse typedResponse = new PaymentReceivedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._paymentId = (byte[]) eventValues.getIndexedValues().get(0).getValue();
            typedResponse._receiver = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse._amount = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse._expire = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<PaymentReceivedEventResponse> paymentReceivedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, PaymentReceivedEventResponse>() {
            @Override
            public PaymentReceivedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(PAYMENTRECEIVED_EVENT, log);
                PaymentReceivedEventResponse typedResponse = new PaymentReceivedEventResponse();
                typedResponse.log = log;
                typedResponse._paymentId = (byte[]) eventValues.getIndexedValues().get(0).getValue();
                typedResponse._receiver = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse._amount = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse._expire = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<PaymentReceivedEventResponse> paymentReceivedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(PAYMENTRECEIVED_EVENT));
        return paymentReceivedEventFlowable(filter);
    }

    public List<PaymentReleasedEventResponse> getPaymentReleasedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(PAYMENTRELEASED_EVENT, transactionReceipt);
        ArrayList<PaymentReleasedEventResponse> responses = new ArrayList<PaymentReleasedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            PaymentReleasedEventResponse typedResponse = new PaymentReleasedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._paymentId = (byte[]) eventValues.getIndexedValues().get(0).getValue();
            typedResponse._receiver = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<PaymentReleasedEventResponse> paymentReleasedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, PaymentReleasedEventResponse>() {
            @Override
            public PaymentReleasedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(PAYMENTRELEASED_EVENT, log);
                PaymentReleasedEventResponse typedResponse = new PaymentReleasedEventResponse();
                typedResponse.log = log;
                typedResponse._paymentId = (byte[]) eventValues.getIndexedValues().get(0).getValue();
                typedResponse._receiver = (String) eventValues.getIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<PaymentReleasedEventResponse> paymentReleasedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(PAYMENTRELEASED_EVENT));
        return paymentReleasedEventFlowable(filter);
    }

    public List<PaymentRefundedEventResponse> getPaymentRefundedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(PAYMENTREFUNDED_EVENT, transactionReceipt);
        ArrayList<PaymentRefundedEventResponse> responses = new ArrayList<PaymentRefundedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            PaymentRefundedEventResponse typedResponse = new PaymentRefundedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._paymentId = (byte[]) eventValues.getIndexedValues().get(0).getValue();
            typedResponse._sender = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<PaymentRefundedEventResponse> paymentRefundedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, PaymentRefundedEventResponse>() {
            @Override
            public PaymentRefundedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(PAYMENTREFUNDED_EVENT, log);
                PaymentRefundedEventResponse typedResponse = new PaymentRefundedEventResponse();
                typedResponse.log = log;
                typedResponse._paymentId = (byte[]) eventValues.getIndexedValues().get(0).getValue();
                typedResponse._sender = (String) eventValues.getIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<PaymentRefundedEventResponse> paymentRefundedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(PAYMENTREFUNDED_EVENT));
        return paymentRefundedEventFlowable(filter);
    }

    public List<TokenWithdrawEventResponse> getTokenWithdrawEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(TOKENWITHDRAW_EVENT, transactionReceipt);
        ArrayList<TokenWithdrawEventResponse> responses = new ArrayList<TokenWithdrawEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            TokenWithdrawEventResponse typedResponse = new TokenWithdrawEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._requester = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<TokenWithdrawEventResponse> tokenWithdrawEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, TokenWithdrawEventResponse>() {
            @Override
            public TokenWithdrawEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(TOKENWITHDRAW_EVENT, log);
                TokenWithdrawEventResponse typedResponse = new TokenWithdrawEventResponse();
                typedResponse.log = log;
                typedResponse._requester = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<TokenWithdrawEventResponse> tokenWithdrawEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(TOKENWITHDRAW_EVENT));
        return tokenWithdrawEventFlowable(filter);
    }

    public List<TokenBuyDropsEventResponse> getTokenBuyDropsEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(TOKENBUYDROPS_EVENT, transactionReceipt);
        ArrayList<TokenBuyDropsEventResponse> responses = new ArrayList<TokenBuyDropsEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            TokenBuyDropsEventResponse typedResponse = new TokenBuyDropsEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._requester = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse._assetId = (byte[]) eventValues.getIndexedValues().get(1).getValue();
            typedResponse._ocn = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse._drops = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<TokenBuyDropsEventResponse> tokenBuyDropsEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, TokenBuyDropsEventResponse>() {
            @Override
            public TokenBuyDropsEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(TOKENBUYDROPS_EVENT, log);
                TokenBuyDropsEventResponse typedResponse = new TokenBuyDropsEventResponse();
                typedResponse.log = log;
                typedResponse._requester = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse._assetId = (byte[]) eventValues.getIndexedValues().get(1).getValue();
                typedResponse._ocn = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse._drops = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<TokenBuyDropsEventResponse> tokenBuyDropsEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(TOKENBUYDROPS_EVENT));
        return tokenBuyDropsEventFlowable(filter);
    }

    public List<TokenSellDropsEventResponse> getTokenSellDropsEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(TOKENSELLDROPS_EVENT, transactionReceipt);
        ArrayList<TokenSellDropsEventResponse> responses = new ArrayList<TokenSellDropsEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            TokenSellDropsEventResponse typedResponse = new TokenSellDropsEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._requester = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse._assetId = (byte[]) eventValues.getIndexedValues().get(1).getValue();
            typedResponse._ocn = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse._drops = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<TokenSellDropsEventResponse> tokenSellDropsEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, TokenSellDropsEventResponse>() {
            @Override
            public TokenSellDropsEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(TOKENSELLDROPS_EVENT, log);
                TokenSellDropsEventResponse typedResponse = new TokenSellDropsEventResponse();
                typedResponse.log = log;
                typedResponse._requester = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse._assetId = (byte[]) eventValues.getIndexedValues().get(1).getValue();
                typedResponse._ocn = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse._drops = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<TokenSellDropsEventResponse> tokenSellDropsEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(TOKENSELLDROPS_EVENT));
        return tokenSellDropsEventFlowable(filter);
    }

    public List<OwnershipTransferredEventResponse> getOwnershipTransferredEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, transactionReceipt);
        ArrayList<OwnershipTransferredEventResponse> responses = new ArrayList<OwnershipTransferredEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, OwnershipTransferredEventResponse>() {
            @Override
            public OwnershipTransferredEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, log);
                OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
                typedResponse.log = log;
                typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(OWNERSHIPTRANSFERRED_EVENT));
        return ownershipTransferredEventFlowable(filter);
    }

    public RemoteCall<Boolean> checkListingStatus(byte[] listing, byte[] assetId) {
        final Function function = new Function(FUNC_CHECKLISTINGSTATUS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(listing), 
                new org.web3j.abi.datatypes.generated.Bytes32(assetId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteCall<TransactionReceipt> changeListingStatus(byte[] listing, byte[] assetId) {
        final Function function = new Function(
                FUNC_CHANGELISTINGSTATUS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(listing), 
                new org.web3j.abi.datatypes.generated.Bytes32(assetId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Boolean> checkUniqueId(byte[] assetId) {
        final Function function = new Function(FUNC_CHECKUNIQUEID, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(assetId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteCall<Boolean> checkValidId(byte[] assetId) {
        final Function function = new Function(FUNC_CHECKVALIDID, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(assetId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteCall<BigInteger> dropsBalance(byte[] assetId) {
        final Function function = new Function(FUNC_DROPSBALANCE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(assetId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<Boolean> checkAsset(byte[] assetId) {
        final Function function = new Function(FUNC_CHECKASSET, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(assetId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteCall<BigInteger> tokenBalance() {
        final Function function = new Function(FUNC_TOKENBALANCE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> register(byte[] assetId, BigInteger price) {
        final Function function = new Function(
                FUNC_REGISTER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(assetId), 
                new org.web3j.abi.datatypes.generated.Uint256(price)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> sendPayment(byte[] _paymentId, String _receiver, BigInteger _amount, BigInteger _expire, String _contract) {
        final Function function = new Function(
                FUNC_SENDPAYMENT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(_paymentId), 
                new org.web3j.abi.datatypes.Address(_receiver), 
                new org.web3j.abi.datatypes.generated.Uint256(_amount), 
                new org.web3j.abi.datatypes.generated.Uint256(_expire), 
                new org.web3j.abi.datatypes.Address(_contract)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> releasePayment(byte[] _paymentId) {
        final Function function = new Function(
                FUNC_RELEASEPAYMENT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(_paymentId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> refundPayment(byte[] _paymentId) {
        final Function function = new Function(
                FUNC_REFUNDPAYMENT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(_paymentId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Boolean> verifyPayment(byte[] _paymentId) {
        final Function function = new Function(FUNC_VERIFYPAYMENT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(_paymentId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteCall<TransactionReceipt> requestTokens(BigInteger amount) {
        final Function function = new Function(
                FUNC_REQUESTTOKENS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(amount)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> withdraw() {
        final Function function = new Function(
                FUNC_WITHDRAW, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> mintToken() {
        final Function function = new Function(
                FUNC_MINTTOKEN, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> buyDrops(byte[] _assetId, BigInteger _ocn) {
        final Function function = new Function(
                FUNC_BUYDROPS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(_assetId), 
                new org.web3j.abi.datatypes.generated.Uint256(_ocn)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> sellDrops(byte[] _assetId, BigInteger _drops) {
        final Function function = new Function(
                FUNC_SELLDROPS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(_assetId), 
                new org.web3j.abi.datatypes.generated.Uint256(_drops)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<byte[]> generateStr2Id(String contents) {
        final Function function = new Function(FUNC_GENERATESTR2ID, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(contents)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function, byte[].class);
    }

    public RemoteCall<byte[]> generateBytes2Id(byte[] contents) {
        final Function function = new Function(FUNC_GENERATEBYTES2ID, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.DynamicBytes(contents)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function, byte[].class);
    }

    public RemoteCall<TransactionReceipt> increment() {
        final Function function = new Function(
                FUNC_INCREMENT, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    @Deprecated
    public static Market load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new Market(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static Market load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new Market(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static Market load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new Market(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static Market load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new Market(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<Market> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider, String _tokenAddress, String _tcrAddress) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_tokenAddress), 
                new org.web3j.abi.datatypes.Address(_tcrAddress)));
        return deployRemoteCall(Market.class, web3j, credentials, contractGasProvider, BINARY, encodedConstructor);
    }

    public static RemoteCall<Market> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider, String _tokenAddress, String _tcrAddress) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_tokenAddress), 
                new org.web3j.abi.datatypes.Address(_tcrAddress)));
        return deployRemoteCall(Market.class, web3j, transactionManager, contractGasProvider, BINARY, encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<Market> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit, String _tokenAddress, String _tcrAddress) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_tokenAddress), 
                new org.web3j.abi.datatypes.Address(_tcrAddress)));
        return deployRemoteCall(Market.class, web3j, credentials, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<Market> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit, String _tokenAddress, String _tcrAddress) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_tokenAddress), 
                new org.web3j.abi.datatypes.Address(_tcrAddress)));
        return deployRemoteCall(Market.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    protected String getStaticDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }

    public static String getPreviouslyDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }

    public static class AssetRegisteredEventResponse {
        public Log log;

        public byte[] _assetId;

        public String _owner;
    }

    public static class PaymentReceivedEventResponse {
        public Log log;

        public byte[] _paymentId;

        public String _receiver;

        public BigInteger _amount;

        public BigInteger _expire;
    }

    public static class PaymentReleasedEventResponse {
        public Log log;

        public byte[] _paymentId;

        public String _receiver;
    }

    public static class PaymentRefundedEventResponse {
        public Log log;

        public byte[] _paymentId;

        public String _sender;
    }

    public static class TokenWithdrawEventResponse {
        public Log log;

        public String _requester;

        public BigInteger amount;
    }

    public static class TokenBuyDropsEventResponse {
        public Log log;

        public String _requester;

        public byte[] _assetId;

        public BigInteger _ocn;

        public BigInteger _drops;
    }

    public static class TokenSellDropsEventResponse {
        public Log log;

        public String _requester;

        public byte[] _assetId;

        public BigInteger _ocn;

        public BigInteger _drops;
    }

    public static class OwnershipTransferredEventResponse {
        public Log log;

        public String previousOwner;

        public String newOwner;
    }
}
